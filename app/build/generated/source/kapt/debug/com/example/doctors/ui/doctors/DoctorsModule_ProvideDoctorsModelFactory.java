// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.ui.doctors;

import com.example.doctors.model.MyRealmQueries;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DoctorsModule_ProvideDoctorsModelFactory implements Factory<DoctorsModel> {
  private final DoctorsModule module;

  private final Provider<MyRealmQueries> myRealmQueriesProvider;

  public DoctorsModule_ProvideDoctorsModelFactory(
      DoctorsModule module, Provider<MyRealmQueries> myRealmQueriesProvider) {
    this.module = module;
    this.myRealmQueriesProvider = myRealmQueriesProvider;
  }

  @Override
  public DoctorsModel get() {
    return Preconditions.checkNotNull(
        module.provideDoctorsModel(myRealmQueriesProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DoctorsModule_ProvideDoctorsModelFactory create(
      DoctorsModule module, Provider<MyRealmQueries> myRealmQueriesProvider) {
    return new DoctorsModule_ProvideDoctorsModelFactory(module, myRealmQueriesProvider);
  }

  public static DoctorsModel proxyProvideDoctorsModel(
      DoctorsModule instance, MyRealmQueries myRealmQueries) {
    return Preconditions.checkNotNull(
        instance.provideDoctorsModel(myRealmQueries),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
