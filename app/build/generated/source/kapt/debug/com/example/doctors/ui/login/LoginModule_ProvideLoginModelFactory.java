// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.ui.login;

import com.example.doctors.ui.login.helper.LoginHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class LoginModule_ProvideLoginModelFactory implements Factory<LoginModel> {
  private final LoginModule module;

  private final Provider<LoginHelper> loginHelperProvider;

  public LoginModule_ProvideLoginModelFactory(
      LoginModule module, Provider<LoginHelper> loginHelperProvider) {
    this.module = module;
    this.loginHelperProvider = loginHelperProvider;
  }

  @Override
  public LoginModel get() {
    return Preconditions.checkNotNull(
        module.provideLoginModel(loginHelperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static LoginModule_ProvideLoginModelFactory create(
      LoginModule module, Provider<LoginHelper> loginHelperProvider) {
    return new LoginModule_ProvideLoginModelFactory(module, loginHelperProvider);
  }

  public static LoginModel proxyProvideLoginModel(LoginModule instance, LoginHelper loginHelper) {
    return Preconditions.checkNotNull(
        instance.provideLoginModel(loginHelper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
