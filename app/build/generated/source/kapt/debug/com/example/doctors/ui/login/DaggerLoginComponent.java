// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.ui.login;

import android.os.Handler;
import com.example.doctors.MyApplication;
import com.example.doctors.network.ITokenDownloaderService;
import com.example.doctors.network.RestApi;
import com.example.doctors.root.ApplicationComponent;
import com.example.doctors.ui.login.helper.LoginHelper;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerLoginComponent implements LoginComponent {
  private com_example_doctors_root_ApplicationComponent_tokenDownaloderService
      tokenDownaloderServiceProvider;

  private com_example_doctors_root_ApplicationComponent_application applicationProvider;

  private com_example_doctors_root_ApplicationComponent_restApi restApiProvider;

  private Provider<Handler> providesHandlerProvider;

  private Provider<LoginHelper> provideLoginHelperProvider;

  private Provider<LoginModel> provideLoginModelProvider;

  private Provider<LoginPresenter> provideLoginPresenterProvider;

  private DaggerLoginComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.tokenDownaloderServiceProvider =
        new com_example_doctors_root_ApplicationComponent_tokenDownaloderService(
            builder.applicationComponent);
    this.applicationProvider =
        new com_example_doctors_root_ApplicationComponent_application(builder.applicationComponent);
    this.restApiProvider =
        new com_example_doctors_root_ApplicationComponent_restApi(builder.applicationComponent);
    this.providesHandlerProvider =
        DoubleCheck.provider(LoginModule_ProvidesHandlerFactory.create(builder.loginModule));
    this.provideLoginHelperProvider =
        DoubleCheck.provider(
            LoginModule_ProvideLoginHelperFactory.create(
                builder.loginModule,
                tokenDownaloderServiceProvider,
                applicationProvider,
                restApiProvider,
                providesHandlerProvider));
    this.provideLoginModelProvider =
        DoubleCheck.provider(
            LoginModule_ProvideLoginModelFactory.create(
                builder.loginModule, provideLoginHelperProvider));
    this.provideLoginPresenterProvider =
        DoubleCheck.provider(
            LoginModule_ProvideLoginPresenterFactory.create(
                builder.loginModule, provideLoginModelProvider, provideLoginHelperProvider));
  }

  @Override
  public void inject(LoginActivity target) {
    injectLoginActivity(target);
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectLoginPresenter(
        instance, provideLoginPresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private LoginModule loginModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public LoginComponent build() {
      if (loginModule == null) {
        this.loginModule = new LoginModule();
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerLoginComponent(this);
    }

    public Builder loginModule(LoginModule loginModule) {
      this.loginModule = Preconditions.checkNotNull(loginModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }

  private static class com_example_doctors_root_ApplicationComponent_tokenDownaloderService
      implements Provider<ITokenDownloaderService> {
    private final ApplicationComponent applicationComponent;

    com_example_doctors_root_ApplicationComponent_tokenDownaloderService(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public ITokenDownloaderService get() {
      return Preconditions.checkNotNull(
          applicationComponent.tokenDownaloderService(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_example_doctors_root_ApplicationComponent_application
      implements Provider<MyApplication> {
    private final ApplicationComponent applicationComponent;

    com_example_doctors_root_ApplicationComponent_application(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public MyApplication get() {
      return Preconditions.checkNotNull(
          applicationComponent.application(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_example_doctors_root_ApplicationComponent_restApi
      implements Provider<RestApi> {
    private final ApplicationComponent applicationComponent;

    com_example_doctors_root_ApplicationComponent_restApi(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public RestApi get() {
      return Preconditions.checkNotNull(
          applicationComponent.restApi(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
