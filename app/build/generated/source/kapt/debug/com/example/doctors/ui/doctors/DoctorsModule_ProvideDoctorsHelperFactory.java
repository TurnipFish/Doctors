// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.ui.doctors;

import com.example.doctors.MyApplication;
import com.example.doctors.network.IContentDownloaderService;
import com.example.doctors.ui.doctors.helper.DoctorsHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DoctorsModule_ProvideDoctorsHelperFactory implements Factory<DoctorsHelper> {
  private final DoctorsModule module;

  private final Provider<MyApplication> applicationProvider;

  private final Provider<IContentDownloaderService> downloaderProvider;

  public DoctorsModule_ProvideDoctorsHelperFactory(
      DoctorsModule module,
      Provider<MyApplication> applicationProvider,
      Provider<IContentDownloaderService> downloaderProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
    this.downloaderProvider = downloaderProvider;
  }

  @Override
  public DoctorsHelper get() {
    return Preconditions.checkNotNull(
        module.provideDoctorsHelper(applicationProvider.get(), downloaderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DoctorsModule_ProvideDoctorsHelperFactory create(
      DoctorsModule module,
      Provider<MyApplication> applicationProvider,
      Provider<IContentDownloaderService> downloaderProvider) {
    return new DoctorsModule_ProvideDoctorsHelperFactory(
        module, applicationProvider, downloaderProvider);
  }

  public static DoctorsHelper proxyProvideDoctorsHelper(
      DoctorsModule instance, MyApplication application, IContentDownloaderService downloader) {
    return Preconditions.checkNotNull(
        instance.provideDoctorsHelper(application, downloader),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
