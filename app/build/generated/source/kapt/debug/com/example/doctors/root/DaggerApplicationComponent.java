// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.root;

import com.example.doctors.MyApplication;
import com.example.doctors.network.ApiModuleForFetchingContent;
import com.example.doctors.network.ApiModuleForFetchingContent_ProvideApiServiceForDoctorsFactory;
import com.example.doctors.network.ApiModuleForFetchingContent_ProvideApiServiceForImagesFactory;
import com.example.doctors.network.ApiModuleForFetchingContent_ProvideApiServiceForTokenFactory;
import com.example.doctors.network.IContentDownloaderService;
import com.example.doctors.network.IImageDownloaderService;
import com.example.doctors.network.ITokenDownloaderService;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<MyApplication> provideContextProvider;

  private Provider<IContentDownloaderService> provideApiServiceForDoctorsProvider;

  private Provider<IImageDownloaderService> provideApiServiceForImagesProvider;

  private Provider<ITokenDownloaderService> provideApiServiceForTokenProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideContextFactory.create(builder.applicationModule));
    this.provideApiServiceForDoctorsProvider =
        DoubleCheck.provider(
            ApiModuleForFetchingContent_ProvideApiServiceForDoctorsFactory.create(
                builder.apiModuleForFetchingContent));
    this.provideApiServiceForImagesProvider =
        DoubleCheck.provider(
            ApiModuleForFetchingContent_ProvideApiServiceForImagesFactory.create(
                builder.apiModuleForFetchingContent));
    this.provideApiServiceForTokenProvider =
        DoubleCheck.provider(
            ApiModuleForFetchingContent_ProvideApiServiceForTokenFactory.create(
                builder.apiModuleForFetchingContent));
  }

  @Override
  public void inject(MyApplication target) {}

  @Override
  public MyApplication application() {
    return provideContextProvider.get();
  }

  @Override
  public IContentDownloaderService contentDownloaderService() {
    return provideApiServiceForDoctorsProvider.get();
  }

  @Override
  public IImageDownloaderService imageDownloaderService() {
    return provideApiServiceForImagesProvider.get();
  }

  @Override
  public ITokenDownloaderService tokenDownaloderService() {
    return provideApiServiceForTokenProvider.get();
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private ApiModuleForFetchingContent apiModuleForFetchingContent;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      if (apiModuleForFetchingContent == null) {
        this.apiModuleForFetchingContent = new ApiModuleForFetchingContent();
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder apiModuleForFetchingContent(
        ApiModuleForFetchingContent apiModuleForFetchingContent) {
      this.apiModuleForFetchingContent = Preconditions.checkNotNull(apiModuleForFetchingContent);
      return this;
    }
  }
}
