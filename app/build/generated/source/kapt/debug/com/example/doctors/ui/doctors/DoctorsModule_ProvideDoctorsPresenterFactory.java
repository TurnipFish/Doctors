// Generated by Dagger (https://google.github.io/dagger).
package com.example.doctors.ui.doctors;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DoctorsModule_ProvideDoctorsPresenterFactory
    implements Factory<DoctorsPresenter> {
  private final DoctorsModule module;

  private final Provider<DoctorsModel> doctorsModelProvider;

  public DoctorsModule_ProvideDoctorsPresenterFactory(
      DoctorsModule module, Provider<DoctorsModel> doctorsModelProvider) {
    this.module = module;
    this.doctorsModelProvider = doctorsModelProvider;
  }

  @Override
  public DoctorsPresenter get() {
    return Preconditions.checkNotNull(
        module.provideDoctorsPresenter(doctorsModelProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DoctorsModule_ProvideDoctorsPresenterFactory create(
      DoctorsModule module, Provider<DoctorsModel> doctorsModelProvider) {
    return new DoctorsModule_ProvideDoctorsPresenterFactory(module, doctorsModelProvider);
  }

  public static DoctorsPresenter proxyProvideDoctorsPresenter(
      DoctorsModule instance, DoctorsModel doctorsModel) {
    return Preconditions.checkNotNull(
        instance.provideDoctorsPresenter(doctorsModel),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
